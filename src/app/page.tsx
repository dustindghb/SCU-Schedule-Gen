"use client";

import React, { useState, useEffect } from "react";
import { DragDropContext } from "@hello-pangea/dnd";
import { Box } from "@mui/material";

import { Header } from "./components/Header";
import { FileUpload } from "./components/FileUpload";
import { RequirementsList } from "./components/RequirementsList";
import { QuartersGrid } from "./components/QuartersGrid";
import { Chatbot } from "./components/Chatbot";
import { ProgressTracker } from "./components/ProgressTracker";
import { AutoGenerateDialog } from "./components/AutoGenerateDialog";
import { useQuarterPlanner } from "./hooks/useQuarterPlanner";
import { Requirement } from "./types";

export default function QuarterlyPlanner() {
  const [mounted, setMounted] = useState(false);
  
  const {
    tokens,
    requirements,
    quarters,
    uploadedFile,
    handleFileUpload,
    addQuarter,
    autoGenerateCourses,
    onDragEnd,
    handleCourseSelect,
    handleToggleExpand,
    updateRequirements,
    
    // Auto-generate dialog functionality
    isAutoGenerateDialogOpen,
    currentQuarterId,
    autoGenerateDescription,
    handleCloseAutoGenerateDialog,
    handleAutoGenerateDescriptionChange,
    handleAutoGenerateWithDescription,
  } = useQuarterPlanner();

  // Fix hydration error by ensuring component only renders on client
  useEffect(() => {
    setMounted(true);
  }, []);

  // Handle requirements update from file upload
  const handleRequirementsUpdate = (newRequirements: Requirement[]) => {
    if (updateRequirements) {
      updateRequirements(newRequirements);
    } else {
      console.log("Requirements to update:", newRequirements);
    }
  };

  // Calculate progress statistics
  const satisfiedCount = requirements.filter(req => req.status === "satisfied").length;
  const totalCount = requirements.length;
  const progressPercentage = totalCount > 0 ? Math.round((satisfiedCount / totalCount) * 100) : 0;

  // Get current quarter name for dialog
  const currentQuarterName = quarters.find(q => q.id === currentQuarterId)?.name;

  // Don't render until mounted to prevent hydration errors
  if (!mounted) {
    return (
      <div style={{ 
        minHeight: "100vh", 
        display: "flex", 
        alignItems: "center", 
        justifyContent: "center",
        background: "linear-gradient(to bottom right, #e3f2fd, #bbdefb)"
      }}>
        <div>Loading...</div>
      </div>
    );
  }

  return (
    <Box sx={{ minHeight: "100vh", p: 4, background: "linear-gradient(to bottom right, #e3f2fd, #bbdefb)" }}>
      <Box sx={{ maxWidth: "1200px", mx: "auto" }}>
        <Header tokens={tokens} />
        
        <ProgressTracker 
          satisfiedCount={satisfiedCount}
          totalCount={totalCount}
          progressPercentage={progressPercentage}
        />
        
        <FileUpload 
          uploadedFile={uploadedFile} 
          onFileUpload={handleFileUpload}
          onRequirementsUpdate={handleRequirementsUpdate}
        />

        <DragDropContext onDragEnd={onDragEnd}>
          <Box 
            sx={{ 
              display: "flex", 
              flexDirection: { xs: "column", md: "row" },
              gap: 4 
            }}
          >
            <Box sx={{ flex: { xs: "1", md: "0 0 33.333%" } }}>
              <RequirementsList requirements={requirements} />
            </Box>

            <Box sx={{ flex: { xs: "1", md: "0 0 66.666%" } }}>
              <QuartersGrid
                quarters={quarters}
                tokens={tokens}
                requirements={requirements}
                onAddQuarter={addQuarter}
                onAutoGenerate={autoGenerateCourses}
                onCourseSelect={handleCourseSelect}
                onToggleExpand={handleToggleExpand}
              />
            </Box>
          </Box>
        </DragDropContext>

        {/* Auto Generate Dialog */}
        <AutoGenerateDialog
          open={isAutoGenerateDialogOpen}
          onClose={handleCloseAutoGenerateDialog}
          onGenerate={handleAutoGenerateWithDescription}
          description={autoGenerateDescription}
          onDescriptionChange={handleAutoGenerateDescriptionChange}
          tokens={tokens}
          quarterName={currentQuarterName}
        />
      </Box>
      
      {/* Chatbot positioned in bottom right corner */}
      <Chatbot position="bottom-right" />
    </Box>
  );
}