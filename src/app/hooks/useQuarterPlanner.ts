// useQuarterPlanner.ts
import { useState, useCallback } from "react";
import { DragResult, Course, Quarter, Requirement } from "../types";
import { INITIAL_REQUIREMENTS, QUARTER_NAMES, REQUIREMENT_COURSE_OPTIONS } from "../constants";

export const useQuarterPlanner = () => {
  const [tokens, setTokens] = useState(100);
  const [uploadedFile, setUploadedFile] = useState<File | null>(null);
  const [requirements, setRequirements] = useState<Requirement[]>(INITIAL_REQUIREMENTS);
  const [quarters, setQuarters] = useState<Quarter[]>([
    {
      id: "quarter-1",
      name: QUARTER_NAMES[0],
      courses: [],
      isCurrent: true,
    },
  ]);

  // Auto-generate dialog states
  const [isAutoGenerateDialogOpen, setIsAutoGenerateDialogOpen] = useState(false);
  const [currentQuarterId, setCurrentQuarterId] = useState<string | null>(null);
  const [autoGenerateDescription, setAutoGenerateDescription] = useState("");

  // Handle file upload
  const handleFileUpload = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      setUploadedFile(file);
    }
  }, []);

  // Update requirements (function for file parsing)
  const updateRequirements = useCallback((newRequirements: Requirement[]) => {
    console.log("Updating requirements with:", newRequirements);
    
    // Enhance the requirements with course options
    const enhancedRequirements = newRequirements.map(req => {
      // Try to find matching course options based on requirement name
      let courseOptions = [];
      
      // Map requirement names to course option categories
      const reqName = req.name.toLowerCase();
      if (reqName.includes('programming') || reqName.includes('coen 11') || reqName.includes('csci 10') || reqName.includes('cs: csci 10')) {
        courseOptions = REQUIREMENT_COURSE_OPTIONS["Core Programming"] || [];
      } else if (reqName.includes('data structures') || reqName.includes('coen 12') || reqName.includes('csci 61') || reqName.includes('cs: csci 62') || reqName.includes('advanced programming')) {
        courseOptions = REQUIREMENT_COURSE_OPTIONS["Data Structures"] || [];
      } else if (reqName.includes('calculus') || reqName.includes('math 12') || reqName.includes('math 13') || reqName.includes('math 14')) {
        courseOptions = REQUIREMENT_COURSE_OPTIONS["Calculus II"] || [];
      } else if (reqName.includes('physics') || reqName.includes('phys')) {
        courseOptions = REQUIREMENT_COURSE_OPTIONS["Physics I"] || [];
      } else if (reqName.includes('writing') || reqName.includes('english') || reqName.includes('engl') || reqName.includes('arts') || reqName.includes('creative writing')) {
        courseOptions = REQUIREMENT_COURSE_OPTIONS["Technical Writing"] || [];
      } else if (reqName.includes('ethics') || reqName.includes('phil') || reqName.includes('justice') || reqName.includes('technology and society')) {
        courseOptions = REQUIREMENT_COURSE_OPTIONS["Ethics in Technology"] || [];
      } else {
        courseOptions = REQUIREMENT_COURSE_OPTIONS["default"] || [];
      }

      return {
        ...req,
        courseOptions,
        isExpanded: false
      };
    });

    setRequirements(enhancedRequirements);
    
    console.log("Requirements updated successfully with course options");
  }, []);

  // Add a new quarter
  const addQuarter = useCallback(() => {
    const nextQuarterIndex = quarters.length;
    if (nextQuarterIndex < QUARTER_NAMES.length) {
      const newQuarter: Quarter = {
        id: `quarter-${quarters.length + 1}`,
        name: QUARTER_NAMES[nextQuarterIndex],
        courses: [],
      };
      setQuarters(prev => [...prev, newQuarter]);
    }
  }, [quarters.length]);

  // Open auto-generate dialog
  const handleOpenAutoGenerateDialog = useCallback((quarterId: string) => {
    if (tokens < 25) return;
    
    setCurrentQuarterId(quarterId);
    setAutoGenerateDescription("");
    setIsAutoGenerateDialogOpen(true);
  }, [tokens]);

  // Close auto-generate dialog
  const handleCloseAutoGenerateDialog = useCallback(() => {
    setIsAutoGenerateDialogOpen(false);
    setCurrentQuarterId(null);
    setAutoGenerateDescription("");
  }, []);

  // Handle description change
  const handleAutoGenerateDescriptionChange = useCallback((description: string) => {
    setAutoGenerateDescription(description);
  }, []);

  // Auto-generate courses with user description
  const handleAutoGenerateWithDescription = useCallback(() => {
    if (!currentQuarterId || tokens < 25) return;

    console.log(`Auto-generating courses for ${currentQuarterId} with description: "${autoGenerateDescription}"`);

    // Get unsatisfied requirements
    const unsatisfiedReqs = requirements.filter(req => req.status === "unsatisfied");
    const coursesToAdd: Course[] = [];

    // Smart course selection based on user description
    let filteredReqs = unsatisfiedReqs;
    
    if (autoGenerateDescription.trim()) {
      const description = autoGenerateDescription.toLowerCase();
      
      // Filter requirements based on description keywords
      if (description.includes('math') || description.includes('calculus') || description.includes('statistics')) {
        filteredReqs = unsatisfiedReqs.filter(req => 
          req.name.toLowerCase().includes('math') || 
          req.name.toLowerCase().includes('calculus') ||
          req.name.toLowerCase().includes('statistics')
        );
      } else if (description.includes('programming') || description.includes('coding') || description.includes('computer science') || description.includes('cs')) {
        filteredReqs = unsatisfiedReqs.filter(req => 
          req.name.toLowerCase().includes('programming') || 
          req.name.toLowerCase().includes('cs:') ||
          req.name.toLowerCase().includes('computer science') ||
          req.name.toLowerCase().includes('data structures') ||
          req.name.toLowerCase().includes('algorithm')
        );
      } else if (description.includes('physics') || description.includes('science')) {
        filteredReqs = unsatisfiedReqs.filter(req => 
          req.name.toLowerCase().includes('physics') || 
          req.name.toLowerCase().includes('science')
        );
      } else if (description.includes('writing') || description.includes('english') || description.includes('literature') || description.includes('arts')) {
        filteredReqs = unsatisfiedReqs.filter(req => 
          req.name.toLowerCase().includes('writing') || 
          req.name.toLowerCase().includes('english') ||
          req.name.toLowerCase().includes('arts') ||
          req.name.toLowerCase().includes('literature')
        );
      } else if (description.includes('ethics') || description.includes('philosophy') || description.includes('phil')) {
        filteredReqs = unsatisfiedReqs.filter(req => 
          req.name.toLowerCase().includes('ethics') || 
          req.name.toLowerCase().includes('philosophy') ||
          req.name.toLowerCase().includes('justice')
        );
      } else if (description.includes('easy') || description.includes('light') || description.includes('simple')) {
        // Prioritize electives or general education requirements
        filteredReqs = unsatisfiedReqs.filter(req => 
          req.name.toLowerCase().includes('elective') || 
          req.name.toLowerCase().includes('general') ||
          req.name.toLowerCase().includes('arts') ||
          !req.name.toLowerCase().includes('advanced')
        );
      } else if (description.includes('challenging') || description.includes('difficult') || description.includes('advanced')) {
        // Prioritize advanced or core requirements
        filteredReqs = unsatisfiedReqs.filter(req => 
          req.name.toLowerCase().includes('advanced') || 
          req.name.toLowerCase().includes('cs:') ||
          req.name.toLowerCase().includes('calculus') ||
          req.name.toLowerCase().includes('physics')
        );
      }
      
      // If no specific matches found, fall back to all unsatisfied requirements
      if (filteredReqs.length === 0) {
        filteredReqs = unsatisfiedReqs;
      }
    }

    // Generate courses from filtered requirements (max 4 courses per quarter)
    const maxCourses = Math.min(4, filteredReqs.length);
    filteredReqs.slice(0, maxCourses).forEach((req, index) => {
      const course: Course = {
        id: `auto-${currentQuarterId}-${Date.now()}-${index}`,
        name: req.selectedCourse || req.name,
        professor: "TBD",
        timeSlot: "TBD",
        credits: 4,
        requirementId: req.id,
      };
      coursesToAdd.push(course);
    });

    // Add courses to the quarter
    setQuarters(prev =>
      prev.map(quarter =>
        quarter.id === currentQuarterId
          ? { ...quarter, courses: [...quarter.courses, ...coursesToAdd] }
          : quarter
      )
    );

    // Update requirement statuses
    setRequirements(prev =>
      prev.map(req => {
        const isInGeneratedCourses = coursesToAdd.some(course => course.requirementId === req.id);
        return isInGeneratedCourses ? { ...req, status: "satisfied" as const } : req;
      })
    );

    // Deduct tokens
    setTokens(prev => prev - 25);

    // Close dialog
    handleCloseAutoGenerateDialog();

    console.log(`Generated ${coursesToAdd.length} courses based on description`);
  }, [currentQuarterId, tokens, requirements, autoGenerateDescription, handleCloseAutoGenerateDialog]);

  // Auto-generate courses function that opens dialog
  const autoGenerateCourses = useCallback((quarterId: string) => {
    handleOpenAutoGenerateDialog(quarterId);
  }, [handleOpenAutoGenerateDialog]);

  // Handle drag and drop
  const onDragEnd = useCallback((result: DragResult) => {
    const { destination, source, draggableId } = result;

    if (!destination) return;

    // Moving from requirements to quarters
    if (source.droppableId === "requirements" && destination.droppableId.startsWith("quarter-")) {
      const requirement = requirements.find(req => req.id === draggableId);
      if (!requirement) return;

      const newCourse: Course = {
        id: `course-${Date.now()}`,
        name: requirement.selectedCourse || requirement.name,
        professor: "TBD",
        timeSlot: "TBD",
        credits: 4,
        requirementId: requirement.id,
      };

      // Add course to quarter
      setQuarters(prev =>
        prev.map(quarter =>
          quarter.id === destination.droppableId
            ? { ...quarter, courses: [...quarter.courses, newCourse] }
            : quarter
        )
      );

      // Update requirement status
      setRequirements(prev =>
        prev.map(req =>
          req.id === draggableId ? { ...req, status: "satisfied" as const } : req
        )
      );
    }

    // Moving between quarters
    else if (source.droppableId.startsWith("quarter-") && destination.droppableId.startsWith("quarter-")) {
      const sourceQuarter = quarters.find(q => q.id === source.droppableId);
      const course = sourceQuarter?.courses[source.index];
      
      if (!course) return;

      setQuarters(prev => {
        const newQuarters = [...prev];
        
        // Remove from source
        const sourceQuarterIndex = newQuarters.findIndex(q => q.id === source.droppableId);
        newQuarters[sourceQuarterIndex].courses.splice(source.index, 1);
        
        // Add to destination
        const destQuarterIndex = newQuarters.findIndex(q => q.id === destination.droppableId);
        newQuarters[destQuarterIndex].courses.splice(destination.index, 0, course);
        
        return newQuarters;
      });
    }

    // Moving from quarters back to requirements
    else if (source.droppableId.startsWith("quarter-") && destination.droppableId === "requirements") {
      const sourceQuarter = quarters.find(q => q.id === source.droppableId);
      const course = sourceQuarter?.courses[source.index];
      
      if (!course || !course.requirementId) return;

      // Remove course from quarter
      setQuarters(prev =>
        prev.map(quarter =>
          quarter.id === source.droppableId
            ? { 
                ...quarter, 
                courses: quarter.courses.filter((_, index) => index !== source.index) 
              }
            : quarter
        )
      );

      // Update requirement status back to unsatisfied
      setRequirements(prev =>
        prev.map(req =>
          req.id === course.requirementId ? { ...req, status: "unsatisfied" as const } : req
        )
      );
    }
  }, [requirements, quarters]);

  // Handle course selection within requirements
  const handleCourseSelect = useCallback((requirementId: string, courseName: string) => {
    setRequirements(prev =>
      prev.map(req =>
        req.id === requirementId ? { ...req, selectedCourse: courseName } : req
      )
    );
  }, []);

  // Handle expanding/collapsing requirements
  const handleToggleExpand = useCallback((requirementId: string) => {
    setRequirements(prev =>
      prev.map(req =>
        req.id === requirementId ? { ...req, isExpanded: !req.isExpanded } : req
      )
    );
  }, []);

  return {
    tokens,
    requirements,
    quarters,
    uploadedFile,
    handleFileUpload,
    updateRequirements,
    addQuarter,
    autoGenerateCourses, // This now opens the dialog
    onDragEnd,
    handleCourseSelect,
    handleToggleExpand,
    
    // Auto-generate dialog functionality
    isAutoGenerateDialogOpen,
    currentQuarterId,
    autoGenerateDescription,
    handleOpenAutoGenerateDialog,
    handleCloseAutoGenerateDialog,
    handleAutoGenerateDescriptionChange,
    handleAutoGenerateWithDescription,
  };
};