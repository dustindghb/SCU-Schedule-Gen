// AutoGenerateDialog.tsx
import React from "react";
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  Button,
  Typography,
  Box,
  Chip,
  IconButton,
  Divider,
} from "@mui/material";
import { Close, AutoAwesome, School } from "@mui/icons-material";

interface AutoGenerateDialogProps {
  open: boolean;
  onClose: () => void;
  onGenerate: () => void;
  description: string;
  onDescriptionChange: (description: string) => void;
  tokens: number;
  quarterName?: string;
}

const SUGGESTION_CHIPS = [
  "Math and calculus courses",
  "Programming and computer science",
  "Easy electives for this quarter",
  "Challenging advanced courses",
  "Writing and communication",
  "Physics and sciences",
  "Ethics and philosophy",
  "Mix of core and electives",
];

export const AutoGenerateDialog: React.FC<AutoGenerateDialogProps> = ({
  open,
  onClose,
  onGenerate,
  description,
  onDescriptionChange,
  tokens,
  quarterName = "this quarter",
}) => {
  const handleSuggestionClick = (suggestion: string) => {
    onDescriptionChange(suggestion);
  };

  const handleGenerate = () => {
    if (tokens >= 25) {
      onGenerate();
    }
  };

  const canGenerate = tokens >= 25;

  return (
    <Dialog 
      open={open} 
      onClose={onClose} 
      maxWidth="md" 
      fullWidth
      PaperProps={{
        sx: { borderRadius: 2 }
      }}
    >
      <DialogTitle sx={{ pb: 1 }}>
        <Box sx={{ display: "flex", alignItems: "center", justifyContent: "space-between" }}>
          <Box sx={{ display: "flex", alignItems: "center", gap: 1 }}>
            <AutoAwesome color="primary" />
            <Typography variant="h6">
              Auto-Generate Courses for {quarterName}
            </Typography>
          </Box>
          <IconButton onClick={onClose} size="small">
            <Close />
          </IconButton>
        </Box>
      </DialogTitle>

      <DialogContent sx={{ pb: 2 }}>
        <Box sx={{ display: "flex", flexDirection: "column", gap: 3 }}>
          {/* Token cost indicator */}
          <Box sx={{ 
            display: "flex", 
            alignItems: "center", 
            gap: 1,
            p: 2,
            bgcolor: canGenerate ? "primary.50" : "error.50",
            borderRadius: 1,
            border: 1,
            borderColor: canGenerate ? "primary.200" : "error.200"
          }}>
            <School color={canGenerate ? "primary" : "error"} />
            <Typography variant="body2" color={canGenerate ? "primary.main" : "error.main"}>
              <strong>Cost:</strong> 25 tokens 
              {canGenerate ? 
                ` (${tokens} available)` : 
                ` (Need ${25 - tokens} more tokens)`
              }
            </Typography>
          </Box>

          {/* Main description input */}
          <Box>
            <Typography variant="subtitle1" sx={{ mb: 1, fontWeight: "bold" }}>
              Describe the courses you want:
            </Typography>
            <TextField
              fullWidth
              multiline
              rows={3}
              placeholder="E.g., 'I want math and programming courses for this quarter' or 'Give me easy electives' or 'I need challenging advanced courses'"
              value={description}
              onChange={(e) => onDescriptionChange(e.target.value)}
              disabled={!canGenerate}
              sx={{
                "& .MuiOutlinedInput-root": {
                  borderRadius: 2,
                },
              }}
            />
          </Box>

          <Divider />

          {/* Quick suggestions */}
          <Box>
            <Typography variant="subtitle2" sx={{ mb: 1.5, color: "text.secondary" }}>
              Quick suggestions (click to use):
            </Typography>
            <Box sx={{ display: "flex", flexWrap: "wrap", gap: 1 }}>
              {SUGGESTION_CHIPS.map((suggestion, index) => (
                <Chip
                  key={index}
                  label={suggestion}
                  onClick={() => handleSuggestionClick(suggestion)}
                  disabled={!canGenerate}
                  variant="outlined"
                  size="small"
                  sx={{ 
                    cursor: canGenerate ? "pointer" : "default",
                    "&:hover": canGenerate ? {
                      backgroundColor: "primary.50",
                      borderColor: "primary.main",
                    } : {}
                  }}
                />
              ))}
            </Box>
          </Box>

          {/* How it works */}
          <Box sx={{ p: 2, bgcolor: "grey.50", borderRadius: 1 }}>
            <Typography variant="subtitle2" sx={{ mb: 1, fontWeight: "bold" }}>
              How Auto-Generate Works:
            </Typography>
            <Typography variant="body2" color="text.secondary" sx={{ mb: 1 }}>
              • Analyzes your unsatisfied requirements
            </Typography>
            <Typography variant="body2" color="text.secondary" sx={{ mb: 1 }}>
              • Matches courses based on your description
            </Typography>
            <Typography variant="body2" color="text.secondary" sx={{ mb: 1 }}>
              • Adds up to 4 relevant courses to the quarter
            </Typography>
            <Typography variant="body2" color="text.secondary">
              • Marks corresponding requirements as satisfied
            </Typography>
          </Box>
        </Box>
      </DialogContent>

      <DialogActions sx={{ p: 3, pt: 1 }}>
        <Button 
          onClick={onClose}
          variant="outlined"
          sx={{ borderRadius: 1.5 }}
        >
          Cancel
        </Button>
        <Button
          onClick={handleGenerate}
          variant="contained"
          disabled={!canGenerate || !description.trim()}
          startIcon={<AutoAwesome />}
          sx={{ borderRadius: 1.5 }}
        >
          Generate Courses ({25} tokens)
        </Button>
      </DialogActions>
    </Dialog>
  );
};